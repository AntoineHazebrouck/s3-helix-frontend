const https = require('node:https');
const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
const { DynamoDBDocumentClient, PutCommand } = require("@aws-sdk/lib-dynamodb");
const { randomUUID } = require("node:crypto");

// Le nom de la table doit √™tre configur√© dans les variables d'environnement de la Lambda
const TABLE_NAME = process.env.MESSAGES_TABLE; 
const client = new DynamoDBClient({});
const docClient = DynamoDBDocumentClient.from(client);

// Fonction pour appeler l'API m√©t√©o (identique √† celle du WeatherBot)
const getWeather = () => {
    return new Promise((resolve, reject) => {
        const url = "https://api.open-meteo.com/v1/forecast?latitude=50.63&longitude=3.06&current=temperature_2m,cloud_cover,rain";
        https.get(url, (res) => {
            let data = '';
            res.on('data', (chunk) => { data += chunk; });
            res.on('end', () => resolve(JSON.parse(data)));
        }).on('error', (err) => reject(err));
    });
};

/**
 * Ce handler est d√©clench√© par une r√®gle EventBridge (toutes les heures).
 * Il ne lit pas de message existant, il cr√©e un nouveau post de mani√®re proactive.
 */
exports.handler = async (event) => {
    console.log("Ex√©cution de la t√¢che planifi√©e de m√©t√©o...");

    try {
        const weatherData = await getWeather();
        const current = weatherData.current;
        const messageContent = `Bulletin m√©t√©o horaire pour Lille : üå°Ô∏è ${current.temperature_2m}¬∞C, ‚òÅÔ∏è ${current.cloud_cover}% de nuages, üíß ${current.rain} mm.`;

        const item = {
            id: randomUUID(),
            username: "ScheduledWeatherBot", // Un nom diff√©rent pour le distinguer
            content: messageContent,
            timestamp: Date.now()
        };

        const command = new PutCommand({ TableName: TABLE_NAME, Item: item });
        await docClient.send(command);
        
        console.log("Bulletin m√©t√©o horaire publi√© avec succ√®s.");
        return {
            statusCode: 200,
            body: JSON.stringify({ message: "Post m√©t√©o cr√©√©." }),
        };
    } catch (error) {
        console.error("Erreur lors de la publication du bulletin m√©t√©o programm√© :", error);
        // Il est important de lever une erreur pour qu'EventBridge puisse √©ventuellement retenter
        throw error;
    }
};